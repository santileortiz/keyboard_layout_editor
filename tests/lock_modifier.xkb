// Name: my_layout
// Description: Test custom layout
// Short description: su
// Languages: es, us

// This layout demonstrates how the Lock modifier's behavior is different than
// the others.  In this example we have keys of different types with an
// alphabetic keysym assigned to the 1st level. Normally we would expect the
// keysym to change only between keysyms assigned in a level and only when the
// lock modifier is active. Well, none of this happens, probably as a
// consequence of X11's keyboard mapping specification (Chapter 5. of X11's
// protocol specification). Well, none of this will happen.
//
// What happens in this case is that the alphabetic keysym gets converted to
// it's upper case form and that's the key that will be sent when the Lock
// modifier is active. Using a virtual modifier with a different name to make
// an indirect assignment won't stop this behavior. This even affects key types
// that don't even have the Lock modifier in their modifier mask (like the
// ONE_LEVEL, TWO_LEVEL or KEYPAD types here), even weirder, actually mapping
// the Lock modifier to a level makes the Lock modifier work like a normal
// modifier (see the ALPHABETIC type here).
//
// Changing the modifier to another one (like Mod3 for example) does stop this
// from happening. According to X11's specification not assigning the Caps_Lock
// keysym to the CAPS keycode should also prevent this behavior, but that's not
// the case. This inconcistencies make me think that this is probably a bug in
// libxkbcommon comming from this legacy behavior, but I'm not sure. Maybe not
// having this breaks some layouts in the layout database.
//
// In any case, this is a strange behavior that we should have in mind as it
// may cause confusing results from a layout created with the editor. Maybe we
// should not use the Lock modifier at all? That is, assuming this behavior is
// not expected by any layout. Or that we identify layouts that depend on this
// behavior and transform them into a more explicit syntax that uses other
// modifier.

xkb_keymap {
xkb_keycodes "evdev+aliases(qwerty)" {
    minimum = 8;
    maximum = 255;

    // Function keys row
    //<ESC> = 9;
    //<FK01> = 67;
    //<FK02> = 68;
    //<FK03> = 69;
    //<FK04> = 70;
    //<FK05> = 71;
    //<FK06> = 72;
    //<FK07> = 73;
    //<FK08> = 74;
    //<FK09> = 75;
    //<FK10> = 76;
    //<FK11> = 95;
    //<FK12> = 96;
    //<BKSP> = 22;
    // <TAB> = 23;

     // Numbers row
    //<TLDE> = 49;
    <AE01> = 10;
    <AE02> = 11;
    //<AE03> = 12;
    //<AE04> = 13;
    //<AE05> = 14;
    //<AE06> = 15;
    //<AE07> = 16;
    //<AE08> = 17;
    //<AE09> = 18;
    //<AE10> = 19;
    //<AE11> = 20;
    //<AE12> = 21;

    // QWERTY row
    <AD01> = 24;
    <AD02> = 25;
    //<AD03> = 26;
    //<AD04> = 27;
    //<AD05> = 28;
    //<AD06> = 29;
    //<AD07> = 30;
    //<AD08> = 31;
    //<AD09> = 32;
    //<AD10> = 33;
    //<AD11> = 34;
    //<AD12> = 35;

    // Modifiers
    //<LCTL> = 37;
    <LFSH> = 50;
    <RTSH> = 62;
    //<LALT> = 64;
    <CAPS> = 66;
    //<RCTL> = 105;
    //<RALT> = 108;
    //<LWIN> = 133;
    //<RWIN> = 134;
    // <ALT> = 204;
    <NMLK> = 77;
    //<LVL3> = 92;
    //<META> = 205;
    //<SUPR> = 206;
    //<HYPR> = 207;
};

xkb_types "minimal" {

    virtual_modifiers NumLock, Alt;
    type "ONE_LEVEL" {
        modifiers= none;
        level_name[Level1]= "Any";
    };
    type "TWO_LEVEL" {
        modifiers= Shift;
        map[Shift ]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
    };
    type "ALPHABETIC" {
        modifiers= Shift+Lock;
        map[Shift]= Level2;
        map[Lock]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Caps";
    };
    type "KEYPAD" {
        modifiers= Shift+NumLock;
        map[Shift]= Level2;
        map[NumLock]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Number";
    };
};

xkb_compatibility "minimal" {

    virtual_modifiers ScrollLock,NumLock;

    interpret Caps_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=Lock);
    };

    interpret Any+Exactly(Lock) {
        action= LockMods(modifiers=Lock);
    };

    interpret Any+AnyOf(all) {
        action= SetMods(modifiers=modMapMods,clearLocks);
    };

    indicator "Scroll Lock" {
        whichModState= locked;
        modifiers= ScrollLock;
    };
};

xkb_symbols "pc+us+inet(evdev)" {

    name[group1]="English (US)";

    key <AE01> {
        type= "KEYPAD",
        symbols[Group1]= [k, 0]
    };

    key <AE02> {
        type= "TWO_LEVEL",
        symbols[Group1]= [b, at]
    };

    key <AD01> {
        type= "ALPHABETIC",
        symbols[Group1]= [a, t]
    };

    key <AD02> {
        type= "ONE_LEVEL",
        symbols[Group1]= [o]
    };

    key <LFSH> { [ Shift_L ] };
    key <RTSH> { [ Shift_R ] };
    key <CAPS> { [ Caps_Lock ] };
    key <NMLK> { [ Num_Lock ] };

    modifier_map Shift { <LFSH> };
    modifier_map Shift { <RTSH> };
    modifier_map Lock { <CAPS> };
    modifier_map Mod2 { <NMLK> };
};

xkb_geometry "pc(pc105)" {
};

};
