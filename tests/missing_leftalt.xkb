// When loading this keymap into libxkbcommon the left alt modifier will not
// work but the right alt modifier will. Why is this happening?.
//
// I've made some testsing and now have some more clues:
//  - The issue stops if we define a keycode before <LALT> in the keycodes
//    section.
//  - Flipping the order of <LALT> and <RALT> does not seem to flip the issue
//    to make <RALT> not work.
//  - Changing <LALT> and <RALT> definitions, for <LFSH> (keycode 50) and
//    <RTSH> (keycode 62) has the same behavior but now the non working
//    modifier key is <RTSH>.
//  - Changing them for <LWIN> and <RWIN> makes none of these keycodes set a
//    modifier. Strangeley enough adding the extra keycode fixes both of them.

xkb_keymap {
xkb_keycodes "keys_k" {
    minimum = 8;
    maximum = 255;
    // Uncommenting the following line fixes the issue. It does not seem to be
    // specific to the <ESC> keycode. Why?
    // <ESC> = 9;

    <LALT> = 64;
    <RALT> = 108;
};

xkb_types "keys_t" {
    virtual_modifiers Alt,Hyper,Meta,NumLock,Super;

    type "ONE_LEVEL" {
        modifiers = none;
        map[none] = Level1;
        level_name[Level1] = "Level 1";
    };
    type "TWO_LEVEL" {
        modifiers = Shift;
        map[none] = Level1;
        map[Shift] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
    type "ALPHABETIC" {
        modifiers = Shift + Lock;
        map[none] = Level1;
        map[Lock] = Level2;
        map[Shift] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
    type "KEYPAD" {
        modifiers = NumLock + Shift;
        map[none] = Level1;
        map[NumLock] = Level2;
        map[Shift] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
};

xkb_compatibility "keys_c" {
};

xkb_symbols "keys_s" {
    key <LALT> {
        type= "ONE_LEVEL",
        symbols[Group1]= [ Alt_L ],
        actions[Group1]= [ SetMods(modifiers=Mod1) ]
    };
    key <RALT> {
        type= "ONE_LEVEL",
        symbols[Group1]= [ Alt_R ],
        actions[Group1]= [ SetMods(modifiers=Mod1) ]
    };
    modifier_map Mod1  { <LALT> };
    modifier_map Mod1  { <RALT> };
};

};

