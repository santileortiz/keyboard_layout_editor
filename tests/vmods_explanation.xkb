// This example shows how virtual modifiers work. There is a lot of
// misinformation about virtual modifiers on the internet. I've never seen
// anyone really explain how to actually have a layout with more than 8 working
// modifiers. Most explanations say virtual mods are capable of doing this, but
// they don't say how. This layout sets up 11 working modifiers, 8 real and 3
// virtual.
//
// As I thought from the beginning, the only way in which you can get more
// modifiers is by assigning virtual modifiers to a set of the 8 real
// modifiers, as if we were encoding a binary 8 bit number. What is not stright
// forward is how the xkb file format defines these. The most stright forward
// thing would have been something like
//
//        vmod myVirtualMod = Mod1 + Mod2;
//
// This is not what happens. Instead, this encoding is spread accross
// virtualModifier definitions in interprets, vmods definitions in key
// statements and modifier_map statements inside the symbols section.
//
// First of all is important to understand that the virtualModifier field in
// interpret statements and the vmods one in key statements are logically the
// same, and serve the same purpose: To assign a list of virtual modifier names
// to a keycode. We call this list of virtual modifier names, the virtual
// modifier definition list of that key. In key statements we have multiple
// vmods because a single key has multiple levels and each level can match a
// different interpret statement with a different virtualModifier, in this case
// all these virtual modifier names are mapped to the same key.
//
// Now, what the modifier_map statement in the symbols section does is, assign
// a real modifier to a key. Note that a key at most can have a single real
// modifier mapped to it.
//
// Then, the encoding of a virtual modifier V will be the logical or of all
// real modifiers mapped to keys where V appears in its virtual modifier
// definition list. Lets see a better example to understand this:
//
//   modifier_map             Virtual modifier definition list
//       Mod1 ---> <KC1> ---> L: NumLock, AltGr, Alt
//       Mod2 ---> <KC2> ---> L: AltGr, Alt
//       Mod3 ---> <KC3> ---> L: AltGr
//
// The encoding of each virtual modifier will be:
//               NumLock: Mod1
//                   Alt: Mod1 + Mod2
//                 AltGr: Mod1 + Mod2 + Mod3
//
// Note that, because things are spread in different places of the file format
// some of them can be missing, in this case the corresponding 'bit' of the
// virtual modifier won't be mapped. It's also possible that a real modifier is
// mapped to multiple keys, in which case they are just merged together.
//
// From the example we can see the main drawback of virtual modifiers: They are
// not independent. If AltGr is triggered, Alt and NumLock will be triggered
// too, because these are subsets of the encoding of AltGr. In the same way
// triggering Alt will also trigger NumLock but not AltGr. Also, if actions are
// added to different keys to set Mod1, Mod2 and Mod3, pressing Mod1 and Mod2
// simultaneously will be equivalent to setting the Alt virtual modifier.
//
// This example (assuming a normal QWERTY keyboard) adds actions to the
// QWERTYUI keys to set the 8 real modifiers, keys 12345678 are indicators for
// each real modifier, and each one corresponds to the one below. Then we do
// the same for the P, [ and ] keys but for the 3 virtual modifiers Foo, Bar
// and Baz respectiveley, the indicators for these modifiers are 0, - and =
// keys. The best way to see how this layout works is by using the
// xkbcommon-view program. Build it and run it using:
//
//         ./pymk xkbcommon_view
//         ./bin/xkbcommon-view ./test/vmods_explanation.xkb
//
// There are some extra details on how the interpret virtualModifier interacts
// with key vmods, they are tested in the interpret_vs_symbol_vmod_*.xkb
// layouts. These can also be tested with the xkbcommon-view program.
//
// Conclusions regarding the layout editor:
//
//  * The purpose of virtual modifiers is to allow balancing 2 resources:
//    number of total modifiers and number of distinct modifiers that need to
//    be pressed simultaneously.
//
//    A 100% real modifier layout allows up to 8 total modifiers where all of
//    them can be pressed at the same time and each one be independent of the
//    rest. A 100% virtual modifier layout allows up to 2^8 total modifiers,
//    but pressing 2 modifiers at the same time will ALWAYS trigger a 3rd
//    modifier.
//
//  * Virtual modifiers are not necessary, we can always just have an action
//    set multiple real modifiers and a level of a key type be assigned to
//    multiple modifiers. The keyboard layout editor will not expose this
//    complexity to the user, we will only support real modifiers. All layouts
//    loaded that contain virtual modifiers will be translated to versions
//    without them.
//
//  * It is possible to create an algorithm that, given a full layout that
//    requires more than 8 modifiers, tries to encode the necessary virtual
//    modifiers in such a way that all modifiers behave as real modidifers.
//    This actually looks like an interesting algorithm to develop. Until such
//    algorithm exists users can use real modifiers and create the custom
//    encoding by themselves.

xkb_keymap {
xkb_keycodes "keys_k" {
    minimum = 8;
    maximum = 255;
    <ESC> = 9; // KEY_ESC

    <M1> = 24;
    <M2> = 25;
    <M3> = 26;
    <M4> = 27;
    <M5> = 28;
    <M6> = 29;
    <M7> = 30;
    <M8> = 31;

    <FOO> = 33;
    <BAR> = 34;
    <BAZ> = 35;

    <1> = 10;
    <2> = 11;
    <3> = 12;
    <4> = 13;
    <5> = 14;
    <6> = 15;
    <7> = 16;
    <8> = 17;

    <FKEY> = 19;
    <BKEY> = 20;
    <ZKEY> = 21;
};

xkb_types "keys_t" {
    virtual_modifiers NumLock,Foo,Bar,Baz;

    type "ONE_LEVEL" {
        modifiers = none;
        map[none] = Level1;
        level_name[Level1] = "Level 1";
    };
    type "TWO_LEVEL" {
        modifiers = Shift;
        map[none] = Level1;
        map[Shift] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
    type "ALPHABETIC" {
        modifiers = Shift + Lock;
        map[none] = Level1;
        map[Lock] = Level2;
        map[Shift] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
    type "KEYPAD" {
        modifiers = NumLock + Shift;
        map[none] = Level1;
        map[NumLock] = Level2;
        map[Shift] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };

    type "M1_TEST" {
        modifiers = Shift;
        map[none] = Level1;
        map[Shift] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
    type "M2_TEST" {
        modifiers = Control;
        map[none] = Level1;
        map[Control] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
    type "M3_TEST" {
        modifiers = Lock;
        map[none] = Level1;
        map[Lock] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
    type "M4_TEST" {
        modifiers = Mod1;
        map[none] = Level1;
        map[Mod1] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
    type "M5_TEST" {
        modifiers = Mod2;
        map[none] = Level1;
        map[Mod2] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
    type "M6_TEST" {
        modifiers = Mod3;
        map[none] = Level1;
        map[Mod3] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
    type "M7_TEST" {
        modifiers = Mod4;
        map[none] = Level1;
        map[Mod4] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
    type "M8_TEST" {
        modifiers = Mod5;
        map[none] = Level1;
        map[Mod5] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
    type "FOO_TEST" {
        modifiers = Foo;
        map[none] = Level1;
        map[Foo] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
    type "BAR_TEST" {
        modifiers = Bar;
        map[none] = Level1;
        map[Bar] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
    type "BAZ_TEST" {
        modifiers = Baz;
        map[none] = Level1;
        map[Baz] = Level2;
        level_name[Level1] = "Level 1";
        level_name[Level2] = "Level 2";
    };
};

xkb_compatibility "keys_c" {
};

xkb_symbols "keys_s" {
    key <ESC> {
        type= "ONE_LEVEL",
        symbols[Group1]= [ Escape ],
        actions[Group1]= [ NoAction() ]
    };
    key <M1> {
        type= "ONE_LEVEL",
        symbols[Group1]= [ Shift_L ],
        actions[Group1]= [ SetMods(modifiers=Shift) ]
    };
    key <M2> {
        type= "ONE_LEVEL",
        symbols[Group1]= [ Shift_L ],
        actions[Group1]= [ SetMods(modifiers=Control) ]
    };
    key <M3> {
        type= "ONE_LEVEL",
        symbols[Group1]= [ Shift_L ],
        actions[Group1]= [ SetMods(modifiers=Lock) ]
    };
    key <M4> {
        vmods= Foo+Baz,
        type= "ONE_LEVEL",
        symbols[Group1]= [ Shift_L ],
        actions[Group1]= [ SetMods(modifiers=Mod1) ]
    };
    key <M5> {
        vmods= Foo+Baz,
        type= "ONE_LEVEL",
        symbols[Group1]= [ Shift_L ],
        actions[Group1]= [ SetMods(modifiers=Mod2) ]
    };
    key <M6> {
        vmods= Foo+Baz,
        type= "ONE_LEVEL",
        symbols[Group1]= [ Shift_L ],
        actions[Group1]= [ SetMods(modifiers=Mod3) ]
    };
    key <M7> {
        vmods= Bar+Baz,
        type= "ONE_LEVEL",
        symbols[Group1]= [ Shift_L ],
        actions[Group1]= [ SetMods(modifiers=Mod4) ]
    };
    key <M8> {
        vmods= Bar+Baz,
        type= "ONE_LEVEL",
        symbols[Group1]= [ Shift_L ],
        actions[Group1]= [ SetMods(modifiers=Mod5) ]
    };

    key <FOO> {
        type= "ONE_LEVEL",
        symbols[Group1]= [ Shift_L ],
        actions[Group1]= [ SetMods(modifiers=Foo) ]
    };
    key <BAR> {
        type= "ONE_LEVEL",
        symbols[Group1]= [ Shift_L ],
        actions[Group1]= [ SetMods(modifiers=Bar) ]
    };
    key <BAZ> {
        type= "ONE_LEVEL",
        symbols[Group1]= [ Shift_L ],
        actions[Group1]= [ SetMods(modifiers=Baz) ]
    };

    key <1> {
        type= "M1_TEST",
        symbols[Group1]= [ O, bar ]
    };
    key <2> {
        type= "M2_TEST",
        symbols[Group1]= [ O, bar ]
    };
    key <3> {
        type= "M3_TEST",
        symbols[Group1]= [ O, bar ]
    };
    key <4> {
        type= "M4_TEST",
        symbols[Group1]= [ O, bar ]
    };
    key <5> {
        type= "M5_TEST",
        symbols[Group1]= [ O, bar ]
    };
    key <6> {
        type= "M6_TEST",
        symbols[Group1]= [ O, bar ]
    };
    key <7> {
        type= "M7_TEST",
        symbols[Group1]= [ O, bar ]
    };
    key <8> {
        type= "M8_TEST",
        symbols[Group1]= [ O, bar ]
    };
    key <FKEY> {
        type= "FOO_TEST",
        symbols[Group1]= [ O, bar ]
    };
    key <BKEY> {
        type= "BAR_TEST",
        symbols[Group1]= [ O, bar ]
    };
    key <ZKEY> {
        type= "BAZ_TEST",
        symbols[Group1]= [ O, bar ]
    };

    modifier_map Shift   { <M1> };
    modifier_map Control { <M2> };
    modifier_map Lock    { <M3> };
    modifier_map Mod1    { <M4> };
    modifier_map Mod2    { <M5> };
    modifier_map Mod3    { <M6> };
    modifier_map Mod4    { <M7> };
    modifier_map Mod5    { <M8> };
};

};

